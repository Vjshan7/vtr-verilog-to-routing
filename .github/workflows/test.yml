name: Test

on:
  # We want to run the CI when anything is pushed to master.
  # Since master is a protected branch this only happens when a PR is merged.
  # This is a double check in case the PR was stale and had some issues.
  push:
    branches:
      - master
    paths-ignore: # Prevents from running if only docs are updated
      - 'doc/**'
      - '**/*README*'
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore: # Prevents from running if only docs are updated
      - 'doc/**'
      - '**/*README*'
      - '**.md'
      - '**.rst'
  workflow_dispatch:
  schedule:
  - cron: '0 0 * * *' # daily

# We want to cancel previous runs for a given PR or branch / ref if another CI
# run is requested.
# See: https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # default compiler for all non-compatibility tests
  MATRIX_EVAL: "CC=gcc-13 && CXX=g++-13"

jobs:
  BuildVTR:
    name: 'B: Building VTR Release'
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: Build
      env:
        CMAKE_PARAMS: "-DCMAKE_COMPILE_WARNING_AS_ERROR=on -DVTR_IPO_BUILD=off -DVTR_ASSERT_LEVEL=3"
        BUILD_TYPE: release
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}

    - name: Pack Build
      shell: bash
      run: |
        tar -czvf build.tar.gz --exclude='CMakeFiles' --exclude='*.a' --exclude='*.cmake' build/

    - name: Store Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-release.tar.gz
        path: build.tar.gz
        retention-days: 1


  BuildVTRWithOdin:
    name: 'B: Building VTR Release With Odin'
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: Build
      env:
        CMAKE_PARAMS: "-DCMAKE_COMPILE_WARNING_AS_ERROR=on -DVTR_IPO_BUILD=off -DVTR_ASSERT_LEVEL=3 -DWITH_BLIFEXPLORER=on -DWITH_PARMYS=OFF -DWITH_ODIN=on"
        BUILD_TYPE: release
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}

    - name: Pack Build
      shell: bash
      run: |
        tar -czvf build.tar.gz --exclude='CMakeFiles' --exclude='*.a' --exclude='*.cmake' build/

    - name: Store Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-release-with-odin.tar.gz
        path: build.tar.gz
        retention-days: 1


  Format:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - { name: 'C/C++',       script: 'check-format.sh'    }
        - { name: 'Python',      script: 'check-format-py.sh' }
        - { name: 'Python Lint', script: 'pylint_check.py'    }
    name: 'F: ${{ matrix.name }}'
    steps:

    # TODO: This should be on the same version of Python as would be found on
    #       Ubuntu 24.04 (3.12.3); however that version has some linting errors.
    - uses: actions/setup-python@v5
      with:
        python-version: 3.10.10

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Test
      run: ./dev/${{ matrix.script }}


  VerifyTestSuites:
    runs-on: ubuntu-24.04
    name: 'Verify Test Suites'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3

    - uses: actions/checkout@v4
      # NOTE: We do not need sub-modules. This only verifies the tests, does not run them.

    - name: 'Run test suite verification'
      run: |
        ./dev/vtr_test_suite_verifier/verify_test_suites.py \
            -vtr_regression_tests_dir vtr_flow/tasks/regression_tests \
            -test_suite_info dev/vtr_test_suite_verifier/test_suites_info.json


  UnitTests:
    name: 'U: C++ Unit Tests'
    runs-on: ubuntu-24.04
    needs: [BuildVTR]
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-release.tar.gz

    - name: Unpack Build
      shell: bash
      run: |
        tar -xvzf build.tar.gz

    - name: Test
      run: |
        cd build
        make test -j${{ steps.cpu-cores.outputs.count }}


  # This test builds different variations of VTR (with different CMake Params)
  # and ensures that they can run the basic regression tests. This also ensures
  # that these build variations are warning clean.
  BuildVariations:
    runs-on: ubuntu-24.04
    name: 'B: Build Variations'
    env:
      # For the CI, we want all build variations to be warning clean.
      # NOTE: Need to turn IPO off due to false warnings being produced.
      COMMON_CMAKE_PARAMS: '-DCMAKE_COMPILE_WARNING_AS_ERROR=on -DVTR_IPO_BUILD=off'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: 'Get number of CPU cores'
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: 'Install dependencies'
      run: ./.github/scripts/install_dependencies.sh

    - name: 'ccache'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: 'Test with VTR_ASSERT_LEVEL 4'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVTR_ASSERT_LEVEL=4"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: 'Test with NO_GRAPHICS'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVPR_USE_EZGL=off"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: 'Test with NO_SERVER'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVPR_USE_SERVER=off"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: 'Test with CAPNPROTO disabled'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVTR_ENABLE_CAPNPROTO=off"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: 'Test with serial VPR_EXECUTION_ENGINE'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVPR_EXECUTION_ENGINE=serial -DTATUM_EXECUTION_ENGINE=serial"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: 'Test with VTR_ENABLE_DEBUG_LOGGING enabled'
      if: success() || failure()
      env:
        CMAKE_PARAMS: "${{ env.COMMON_CMAKE_PARAMS }} -DVTR_ENABLE_DEBUG_LOGGING=on"
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        rm -f build/CMakeCache.txt
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        make -j${{ steps.cpu-cores.outputs.count}}
        ./run_reg_test.py vtr_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count}}


  Regression:
    runs-on: ubuntu-24.04
    needs: [BuildVTR]
    strategy:
      fail-fast: false
      matrix:
        include: [
          {
            name: 'Basic',
            suite: 'vtr_reg_basic'
          },
          {
            name: 'Strong',
            suite: 'vtr_reg_strong'
          },
          {
            name: 'Valgrind Memory',
            suite: 'vtr_reg_valgrind_small'
          }
        ]
    name: 'R: ${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-release.tar.gz

    - name: Unpack Build
      shell: bash
      run: |
        tar -xvzf build.tar.gz

    - name: Test
      run: |
        ./run_reg_test.py ${{ matrix.suite }} -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: Upload regression run files
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.name}}_run_files
        path: |
          vtr_flow/**/*.out
          # vtr_flow/**/*.blif  # Removed since it was taking too much space and was hardly used.
          vtr_flow/**/*.p
          vtr_flow/**/*.net
          vtr_flow/**/*.r

    - name: Upload regression results
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.name}}_results
        path: |
          vtr_flow/**/*.log
          vtr_flow/**/parse_results*.txt


  RegressionWithOdin:
    runs-on: ubuntu-24.04
    needs: [BuildVTRWithOdin]
    strategy:
      fail-fast: false
      matrix:
        include: [
          {
            name: 'Basic_odin',
            suite: 'vtr_reg_basic_odin'
          },
          {
            name: 'Strong_odin',
            suite: 'vtr_reg_strong_odin'
          },
          {
            name: 'Valgrind Memory Odin',
            suite: 'vtr_reg_valgrind_small_odin'
          }
        ]
    name: 'R: ${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-release-with-odin.tar.gz

    - name: Unpack Build
      shell: bash
      run: |
        tar -xvzf build.tar.gz

    - name: Test
      run: |
        ./run_reg_test.py ${{ matrix.suite }} -show_failures -j${{ steps.cpu-cores.outputs.count}}

    - name: Upload regression run files
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.name}}_run_files
        path: |
          vtr_flow/**/*.out
          # vtr_flow/**/*.blif  # Removed since it was taking too much space and was hardly used.
          vtr_flow/**/*.p
          vtr_flow/**/*.net
          vtr_flow/**/*.r

    - name: Upload regression results
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.name}}_results
        path: |
          vtr_flow/**/*.log
          vtr_flow/**/parse_results*.txt


  Sanitized:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include: [
          {
            name: 'Basic',
            params: '-DVTR_ASSERT_LEVEL=3 -DVTR_ENABLE_SANITIZE=on -DVTR_IPO_BUILD=off -DWITH_BLIFEXPLORER=on -DWITH_PARMYS=OFF -DWITH_ODIN=on',
            suite: 'vtr_reg_basic_odin'
          }
          #- { name: 'Strong', suite: 'vtr_reg_strong' } # SKIP Too long to run on GitHub Actions (max 6h)
        ]


    name: 'S: ${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.suite }}

    - name: Test
      env:
        CMAKE_PARAMS: ${{ matrix.params }}
        BUILD_TYPE: debug
        LSAN_OPTIONS: 'exitcode=42' #Use a non-standard exit code to ensure LSAN errors are detected
        # In Ubuntu 20240310.1.0, the entropy of ASLR has increased (28 -> 32). LLVM 14 in this
        # image is not compatible with this increased ASLR entropy. Apparently, memory sanitizer
        # depends on LLVM and all CI tests where VTR_ENABLE_SANITIZE is enabled fail. For a temporary
        # fix, we manually reduce the entropy. This quick fix should be removed in the future
        # when github deploys a more stable Ubuntu image.
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        sudo sysctl -w vm.mmap_rnd_bits=28
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh
        # We skip QoR since we are only checking for errors in sanitizer runs
        ./run_reg_test.py ${{ matrix.suite }} -show_failures -j${{ steps.cpu-cores.outputs.count }} -skip_qor


  Parmys:
    name: 'Parmys Basic Test'
    runs-on: ubuntu-24.04
    needs: [BuildVTR]
    steps:

      - uses: actions/setup-python@v5
        with:
          python-version: 3.12.3
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Install dependencies
        run: ./.github/scripts/install_dependencies.sh

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-release.tar.gz

      - name: Unpack Build
        shell: bash
        run: |
          tar -xvzf build.tar.gz

      - name: Test
        run: |
          ./run_reg_test.py parmys_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count }}


  ODINII:
    name: 'ODIN-II Basic Test'
    runs-on: ubuntu-24.04
    needs: [BuildVTRWithOdin]
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-release-with-odin.tar.gz

    - name: Unpack Build
      shell: bash
      run: |
        tar -xvzf build.tar.gz

    - name: Test
      run: |
        sudo sysctl -w vm.mmap_rnd_bits=28
        ./run_reg_test.py odin_reg_basic -show_failures -j${{ steps.cpu-cores.outputs.count }}


  VQM2BLIF:
    name: 'VQM2BLIF Basic Tests'
    runs-on: ubuntu-24.04
    needs: [BuildVTR]
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-release.tar.gz

    - name: Unpack Build
      shell: bash
      run: |
        tar -xvzf build.tar.gz

    - name: Test
      run: |
        ./utils/vqm2blif/test/scripts/test_vqm2blif.sh

  Compatibility:
    runs-on: ubuntu-24.04
    needs: [BuildVTR]
    strategy:
      fail-fast: false
      matrix:
        include:
        - { name: 'GCC 11 (Ubuntu Noble - 24.04)',    eval: 'CC=gcc-11 && CXX=g++-11',       key: 'gcc-11', }
        - { name: 'GCC 12 (Ubuntu Noble - 24.04)',    eval: 'CC=gcc-12 && CXX=g++-12',       key: 'gcc-12', }
        - { name: 'GCC 14 (Ubuntu Noble - 24.04)',    eval: 'CC=gcc-14 && CXX=g++-14',       key: 'gcc-14', }
        - { name: 'Clang 16 (Ubuntu Noble - 24.04)',  eval: 'CC=clang-16 && CXX=clang++-16', key: 'clang-16', }
        - { name: 'Clang 17 (Ubuntu Noble - 24.04)',  eval: 'CC=clang-17 && CXX=clang++-17', key: 'clang-17', }
        - { name: 'Clang 18 (Ubuntu Noble - 24.04)',  eval: 'CC=clang-18 && CXX=clang++-18', key: 'clang-18', }
        # Note: We do not include GCC-13 since it is the default and is already tested.
    name: 'B: ${{ matrix.name }}'
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12.3
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install dependencies
      run: ./.github/scripts/install_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.key }}

    - name: Test
      env:
        CMAKE_PARAMS: "-DVTR_ASSERT_LEVEL=3 -DWITH_BLIFEXPLORER=on -DWITH_ODIN=on -DVTR_IPO_BUILD=off"
        MATRIX_EVAL: ${{ matrix.eval }}
        BUILD_TYPE: debug # Note: We use the debug build here to make the build time faster since we do not care about run time.
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh

  JammyCompatibility:
    name: 'Ubuntu Jammy - 22.04 Compatibility Test'
    runs-on: ubuntu-22.04
    needs: [BuildVTR]
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: 3.10.10

    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Install Dependencies
      run: ./.github/scripts/install_jammy_dependencies.sh

    - uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: Test
      env:
        CMAKE_PARAMS: "-DVTR_ASSERT_LEVEL=3 -DCMAKE_COMPILE_WARNING_AS_ERROR=on -DVTR_IPO_BUILD=off"
        MATRIX_EVAL: 'CC=gcc-11 && CXX=g++-11'
        BUILD_TYPE: debug # Note: We use the debug build here to make the build time faster since we do not care about run time.
        NUM_PROC: ${{ steps.cpu-cores.outputs.count }}
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        ./.github/scripts/build.sh

